services:
  tg_bot:
    image: books_base_tg_bot_image
    container_name: books_base_tg_bot
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /usr/src/app/books_base_tg_bot
    volumes:
      - .:/usr/src/app/books_base_tg_bot
    command: python -m main
    restart: always
    env_file:
      - .env
    depends_on:
      - api
      - redis
    networks:
      - books_base
    stop_signal: SIGINT
    logging:
      driver: json-file
      options:
        max-size: 200k
        max-file: 10

  api:
    image: books_base_api_image
    container_name: books_base_api
    build:
      context: .
      dockerfile: api/Dockerfile
    working_dir: /usr/src/app/books_base_api
    volumes:
      - .:/usr/src/app/books_base_api
    command: >
      bash -c "
        alembic upgrade head &&
        gunicorn api.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind ${API__RUN__HOST}:${API__RUN__PORT}
      "
    restart: always
    env_file:
      - .env
    depends_on:
      - pg_database
    networks:
      - books_base
    ports:
      - ${API__RUN__PORT}:8000
    stop_signal: SIGINT
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${API__RUN__HOST}:${API__RUN__PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: 200k
        max-file: 10

  pg_database:
    image: postgres:17-alpine
    container_name: books_base_pg_database
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      POSTGRES_DB: ${DB__DATABASE}
    volumes:
      - books_base_pg_database_volume:/var/lib/postgresql/data
    networks:
      - books_base
    ports:
      - ${DB__PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: 200k
        max-file: 10

  redis:
    image: redis:alpine
    container_name: books_base_redis
    restart: always
    command: redis-server --port ${REDIS__PORT} --loglevel warning --requirepass ${REDIS__PASSWORD}
    env_file:
      - .env
    volumes:
      - books_base_redis_volume:/data
    networks:
      - books_base

networks:
  books_base:
    name: books_base
    driver: bridge

volumes:
  books_base_pg_database_volume:
    name: books_base_pg_database_volume
  books_base_redis_volume:
    name: books_base_redis_volume